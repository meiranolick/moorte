24:
1. Child toolbars should be named as an underscored digit instead higher numbers.  Toolbars will be numbered.
2. By convention, regular buttons are now lowercased, Toolbars are Uppercased.
3. All toolbars that have shortcuts within them (and perhaps in their children) should be loaded at startup (as otherwise the shortcuts would not be able to 'press' the buttons)
4. Shortcuts are now working.

25:
1. Cleanup.
2. Default buttons should be an array, where each string is a comma delimited list of buttons, and dynamic menus should be bracketed.
2. Make default load of toolbars to be with display none. 
5. Dynamic flyout buttons will be named and added to the Buttons hash for the duration of the page. 
6. Special properties removed from properties hash via map.
7. bind the elent with the call when shortcut is pressed.

29:
1. Fix - button now updates when pressed [Perfection perhaps in FF 3.1] (FF3) 
2. Move "init function" till after submneus have been created.

30:
1. Fix - Various workarounds for bugs in FF3 that were blocking certain commands (FF3).
2. Indent menu not working due to a bug in the update check (FF3)
3. Begin work on support for FF2 and a modal option.
4. More documentation.

32:
1. Fix pageTop, auto positioning when too high.

34:
1. WontFix - calculate num in toolbar function instead of requiring.
2. Added float:false, and change to default.
3. Add "insert picture" button
4. Consider ways to bound size of toolbars.
5. change variable name of updateBtns function
6. Work on bug with addLink, and bug with init:indent function / bind button to button object

35:
a) rename toolbar to collection
b) if click returns an array, it will not run toolbar (but wrote and greyed out line, can be reconsidered.

38:
a) renamed collection to addCollection
b) moved defaults into the buttons hash, allowing for onLoad
c) onLoad runs before subCollections are run
d) only put page in design mode for justify and indent
e) toolbar should not display when set to none
f) All collections are now within the same div
g) Each collection should be part of a group - by default named after the collection - of which only one from each group can show at a time.
h) rejected - expandHidden
i) rejected - change numbering system to 123 for toolbars and abc for subbars.
j) Removed the default behavior of opening subcollections that have shortcuts related to them.

45:
44: 
a. Cleanup regexs updated to reflect the latest changes made to the MooEditable codebase.  Does NOT behave exactly the same, but similar.  Further modifications are planned.
b. passed in values now override the 'contains' attribute of the buttons hash.
c. buttons hash cleaned some
d. 'buttons' cleanup in addCollection now a loop.
e. Defaults can have spaces, can be a string, etc., as they are handled by addCollection
f. It appends classes from the buttons hash instead of overwriting the originals.
g. if a input/textarea, unselectable defaults to off.
h. onLoad runs after buttons are init'd, whether by 'contains' or 'onInit'.
i. The logic for the following idea was reworked: addCollection takes as the second parameter the object after which to put the toolbar.  It must exist, so we will now manually create it for init, and must modify buttons to send along parent
j. run function - called by mousedown, onLoad and onInit - now exists standalone within the utilities hash.
k. onInit is run before any buttons are pressed
l. Is now added within the element inside of before it, in order to be better positioned.
m. Renamed addCollection() to addElements().
n. mThe while in addCollection now protects even against stacked arrays  (ie: the following should not create an error - [[[bold, italics]]].  Currently, [[bold, italcs]] is cleaned, with two brackets.  needed for l to work.)
o. contains tag added to buttons hash.
p. Due to changes, now classes, events. etc can be applied to collections (add to hash?)
q. defaults are not dynamically added to the buttons hash even if they have no match.
r. Expanded the 'collection' array object. 
	a) It already can be called onLoad and onClick.  Add to args?
	b) Allow it to be an object, where the key refers to the containing element.  {main:['bold', 'italics']} becomes <div class="miCollection_Main"><a class="miBold">..
	c) Allow it to have within it nested arrays: [['main','bold'],['italics']] where each will expand.
		If done correctly, this should make it infinitely more flexible (and confusing?)

50:
a. Fixed - On index.html the inline bar is always showing 
b. it does not require elements, it test for an object while initing the class. 
c. When a string is passed to addCollection, it should wrap it in brackets, in case it is an array.  [commonly, arrays will be created without brackets].
d. onLoad can run 'onClick'
e. Invalid - (unsure of what is meant): press btn which will press key / expand menu, and run optional function afterwards.

		
		
		
Old Docs:
*
*	Usage: 
*		new MooInline(); - applies to textareas and elements with the class "mooinline"
*		new MooInline('span.editMe', {inline:true}) - will make the spans with the class of editme editable inline.
*		new MooInline({defaults:['underline,italics','bold,HelloWorld,JustifyLeft,JustifyRight']}) - 2 toolbars: the first with underline and italics.  The second with bold, a custom defined button, and 2 justify options.
*	Extending:
*		MooInline.Buttons.extend({
*			'HelloWorld':{img:'images/smiley.gif', title:'please click', click:function(){alert('hello World!')}},
*		})
*		
*	Usage Options (default is first on list):

*		floating: [true, false] - If true, bar will float above DOM, and not interfere with layout.  Otherwise it will insert the bar into the dom before the element.  
*		defaults: [comma delimitted string or array of strings, where each string is a row of buttons.  Defaults to 'Main,File,Link,Justify,Lists,|,Indents,Html/Text']
*		location: ['elements', 'inline', 'pageBottom', 'pageTop', none]  elements adds a bar to each element passed in.  'inline' acts like elements but shows the bar only on selection, and remove it onblur.  Only one bar is created. 
*											pageTop and pageBottom shows one bar for whole page, and the location can be edited via css.  None shows no bar, but shortcuts work.
*	
*	Extending:
*	Any properties in extended object will be passed into the new button.  The following are predefined and have special meaning (All are optional):
*		img:   [If a number, defaults to 'images/i.gif'. If opens toolbar, defaults to image of first button in toolbar.  Otherwise, no default] background image
*		shortcut: [no default] keyboard shortcut.  All shortcuts are initialized when editor is created, even if the buttons are not yet showing.
*		element:[if type is 'text','submit',or 'password', defaults to input.  Otherwise defaults to 'a'] element type
*		title: [defaults to object key, or to object key plus " Menu" if button opens toolbar.  If has shortcut, defaults to object key plus (Ctrl+shortcut).  ]
*		init:  [If array, will create a toolbar with those buttons.  Otherwise, defaults to none.] event to be called when button is initialized on the screen.
*		click: [If array, will create a toolbar with those buttons.  Otherwise, defaults to the 'document.execute' command] the mousedown event when the button is pressed,
*		args:  [defaults to object key] arguments to be passed to click event, 
*		Both init & click are passed the args, followed by a reference to the class.  
*		Within the function(args,classReference): The active button is 'this', the toolbar is this.getParent('.miMooInline');.  The active field is t.activeField, an array of all fields associated with the bar is t.fields. 
*		
*
*	Outline of the MooInline function:
*		1. initialize, implements, & options - built in mootools class tools.  See instructions for list of options.
*		2. exec, getRange, setRange - utility functions for the browser's built it editing tools. 
*		3. insertRTE - creates an empty div which will have the Rich Text Editor placed into it.
*			insertToolbar - creates empty div on page for each instance of MooInline, then calls 'toolbar' to inserts toolbars into said empty div.
*			positionToolbar - places said div wherever it should go on page.
*			textArea - if MooInline is applied to textarea, called to replace textarea with element. 
*			updateBtns - called whenever a key or the mouse is pressed. Checks which buttons should appear depressed.
*		4. toolbar - creates toolbar with passed in buttons.
*		5. clean - cleans up passed in html before submitting to prevent xss attacks.  Accepts optional xhtml & semantics options.  Utility is not actually used by MooInline.
*		

